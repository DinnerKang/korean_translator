import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import ChatInterfaces = require("./interfaces/ChatInterfaces");
export interface IChatApi extends basem.ClientApiBase {
    deleteMessage(roomId: number, messageId: number): Promise<void>;
    getAllChatRoomMessages(roomId: number): Promise<ChatInterfaces.Message[]>;
    getChatRoomMessageById(roomId: number, messageId: number): Promise<ChatInterfaces.Message>;
    sendMessageToRoom(messageUpdate: ChatInterfaces.MessageData, roomId: number): Promise<ChatInterfaces.Message>;
    updateChatMessage(messageUpdate: ChatInterfaces.MessageData, roomId: number, messageId: number): Promise<ChatInterfaces.Message>;
    createChatRoom(roomUpdate: ChatInterfaces.RoomData): Promise<ChatInterfaces.Room>;
    deleteChatRoom(roomId: number): Promise<void>;
    getAllRooms(): Promise<ChatInterfaces.Room[]>;
    getChatRoomById(roomId: number): Promise<ChatInterfaces.Room>;
    updateChatRoom(roomUpdate: ChatInterfaces.RoomData, roomId: number): Promise<ChatInterfaces.Room>;
    getAllChatRoomUsers(roomId: number): Promise<ChatInterfaces.User[]>;
    getChatRoomUserById(roomId: number, userId: string): Promise<ChatInterfaces.User>;
    joinRoom(userUpdate: ChatInterfaces.UserData, roomId: number, userId: string): Promise<void>;
    leaveRoom(roomId: number, userId: string): Promise<void>;
}
export declare class ChatApi extends basem.ClientApiBase implements IChatApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
     * Delete a given chat message
     *
     * @param {number} roomId - Id of the room
     * @param {number} messageId - Id of the message to delete
     */
    deleteMessage(roomId: number, messageId: number): Promise<void>;
    /**
     * Retrieve a listing of all chat messages in a given room
     *
     * @param {number} roomId - Id of the room
     */
    getAllChatRoomMessages(roomId: number): Promise<ChatInterfaces.Message[]>;
    /**
     * Retrieve information on a single chat message
     *
     * @param {number} roomId - Id of the room
     * @param {number} messageId - Id of the message to retrieve
     */
    getChatRoomMessageById(roomId: number, messageId: number): Promise<ChatInterfaces.Message>;
    /**
     * Post message to a room
     *
     * @param {ChatInterfaces.MessageData} messageUpdate - Content of the message to post
     * @param {number} roomId - Id of the room
     */
    sendMessageToRoom(messageUpdate: ChatInterfaces.MessageData, roomId: number): Promise<ChatInterfaces.Message>;
    /**
     * Update a given chat message
     *
     * @param {ChatInterfaces.MessageData} messageUpdate - New message content
     * @param {number} roomId - Id of the room
     * @param {number} messageId - Id of the message
     */
    updateChatMessage(messageUpdate: ChatInterfaces.MessageData, roomId: number, messageId: number): Promise<ChatInterfaces.Message>;
    /**
     * Create a single chat room
     *
     * @param {ChatInterfaces.RoomData} roomUpdate - Information to create the room
     */
    createChatRoom(roomUpdate: ChatInterfaces.RoomData): Promise<ChatInterfaces.Room>;
    /**
     * Delete a given chat room
     *
     * @param {number} roomId - Id of the room
     */
    deleteChatRoom(roomId: number): Promise<void>;
    /**
     */
    getAllRooms(): Promise<ChatInterfaces.Room[]>;
    /**
     * Retrieve information on a single chat room
     *
     * @param {number} roomId - Id of the room to retrieve
     */
    getChatRoomById(roomId: number): Promise<ChatInterfaces.Room>;
    /**
     * Update information on a single chat room
     *
     * @param {ChatInterfaces.RoomData} roomUpdate - Room information
     * @param {number} roomId - Id of the room to update
     */
    updateChatRoom(roomUpdate: ChatInterfaces.RoomData, roomId: number): Promise<ChatInterfaces.Room>;
    /**
     * Retrieve a listing of all chat users
     *
     * @param {number} roomId - Id of the room
     */
    getAllChatRoomUsers(roomId: number): Promise<ChatInterfaces.User[]>;
    /**
     * Retrieve information on a single chat user
     *
     * @param {number} roomId - Id of the room
     * @param {string} userId - TfId of the user
     */
    getChatRoomUserById(roomId: number, userId: string): Promise<ChatInterfaces.User>;
    /**
     * Joins a user to a given room
     *
     * @param {ChatInterfaces.UserData} userUpdate - user model information
     * @param {number} roomId - Id of the room
     * @param {string} userId - TfId of the user
     */
    joinRoom(userUpdate: ChatInterfaces.UserData, roomId: number, userId: string): Promise<void>;
    /**
     * Leaves a user from a given room
     *
     * @param {number} roomId - Id of the room
     * @param {string} userId - TfId of the user
     */
    leaveRoom(roomId: number, userId: string): Promise<void>;
}
