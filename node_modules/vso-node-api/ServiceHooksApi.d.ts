import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import ServiceHooksInterfaces = require("./interfaces/ServiceHooksInterfaces");
export interface IServiceHooksApi extends basem.ClientApiBase {
    getConsumerAction(consumerId: string, consumerActionId: string): Promise<ServiceHooksInterfaces.ConsumerAction>;
    getConsumerActions(consumerId: string): Promise<ServiceHooksInterfaces.ConsumerAction[]>;
    getConsumer(consumerId: string): Promise<ServiceHooksInterfaces.Consumer>;
    getConsumers(): Promise<ServiceHooksInterfaces.Consumer[]>;
    createEvents(eventsRequestData: ServiceHooksInterfaces.PublishEventsRequestData): Promise<void>;
    queryInputValues(inputValuesQuery: ServiceHooksInterfaces.SubscriptionInputValuesQuery): Promise<ServiceHooksInterfaces.SubscriptionInputValuesQuery>;
    getNotification(subscriptionId: string, notificationId: number): Promise<ServiceHooksInterfaces.Notification>;
    getNotifications(subscriptionId: string, maxResults?: number, status?: ServiceHooksInterfaces.NotificationStatus, result?: ServiceHooksInterfaces.NotificationResult): Promise<ServiceHooksInterfaces.Notification[]>;
    queryNotifications(query: ServiceHooksInterfaces.NotificationsQuery): Promise<ServiceHooksInterfaces.NotificationsQuery>;
    createSubscription(subscription: ServiceHooksInterfaces.Subscription): Promise<ServiceHooksInterfaces.Subscription>;
    deleteSubscription(subscriptionId: string): Promise<void>;
    getSubscription(subscriptionId: string): Promise<ServiceHooksInterfaces.Subscription>;
    listSubscriptions(publisherId?: string, eventType?: string, consumerId?: string, consumerActionId?: string): Promise<ServiceHooksInterfaces.Subscription[]>;
    replaceSubscription(subscription: ServiceHooksInterfaces.Subscription): Promise<ServiceHooksInterfaces.Subscription>;
    querySubscriptions(query: ServiceHooksInterfaces.SubscriptionsQuery): Promise<ServiceHooksInterfaces.SubscriptionsQuery>;
    createTestNotification(testNotification: ServiceHooksInterfaces.Notification): Promise<ServiceHooksInterfaces.Notification>;
}
export declare class ServiceHooksApi extends basem.ClientApiBase implements IServiceHooksApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
     * @param {string} consumerId
     * @param {string} consumerActionId
     */
    getConsumerAction(consumerId: string, consumerActionId: string): Promise<ServiceHooksInterfaces.ConsumerAction>;
    /**
     * @param {string} consumerId
     */
    getConsumerActions(consumerId: string): Promise<ServiceHooksInterfaces.ConsumerAction[]>;
    /**
     * @param {string} consumerId
     */
    getConsumer(consumerId: string): Promise<ServiceHooksInterfaces.Consumer>;
    /**
     */
    getConsumers(): Promise<ServiceHooksInterfaces.Consumer[]>;
    /**
     * @param {ServiceHooksInterfaces.PublishEventsRequestData} eventsRequestData
     */
    createEvents(eventsRequestData: ServiceHooksInterfaces.PublishEventsRequestData): Promise<void>;
    /**
     * @param {ServiceHooksInterfaces.SubscriptionInputValuesQuery} inputValuesQuery
     */
    queryInputValues(inputValuesQuery: ServiceHooksInterfaces.SubscriptionInputValuesQuery): Promise<ServiceHooksInterfaces.SubscriptionInputValuesQuery>;
    /**
     * @param {string} subscriptionId
     * @param {number} notificationId
     */
    getNotification(subscriptionId: string, notificationId: number): Promise<ServiceHooksInterfaces.Notification>;
    /**
     * @param {string} subscriptionId
     * @param {number} maxResults
     * @param {ServiceHooksInterfaces.NotificationStatus} status
     * @param {ServiceHooksInterfaces.NotificationResult} result
     */
    getNotifications(subscriptionId: string, maxResults?: number, status?: ServiceHooksInterfaces.NotificationStatus, result?: ServiceHooksInterfaces.NotificationResult): Promise<ServiceHooksInterfaces.Notification[]>;
    /**
     * @param {ServiceHooksInterfaces.NotificationsQuery} query
     */
    queryNotifications(query: ServiceHooksInterfaces.NotificationsQuery): Promise<ServiceHooksInterfaces.NotificationsQuery>;
    /**
     * @param {ServiceHooksInterfaces.Subscription} subscription
     */
    createSubscription(subscription: ServiceHooksInterfaces.Subscription): Promise<ServiceHooksInterfaces.Subscription>;
    /**
     * @param {string} subscriptionId
     */
    deleteSubscription(subscriptionId: string): Promise<void>;
    /**
     * @param {string} subscriptionId
     */
    getSubscription(subscriptionId: string): Promise<ServiceHooksInterfaces.Subscription>;
    /**
     * @param {string} publisherId
     * @param {string} eventType
     * @param {string} consumerId
     * @param {string} consumerActionId
     */
    listSubscriptions(publisherId?: string, eventType?: string, consumerId?: string, consumerActionId?: string): Promise<ServiceHooksInterfaces.Subscription[]>;
    /**
     * @param {ServiceHooksInterfaces.Subscription} subscription
     */
    replaceSubscription(subscription: ServiceHooksInterfaces.Subscription): Promise<ServiceHooksInterfaces.Subscription>;
    /**
     * @param {ServiceHooksInterfaces.SubscriptionsQuery} query
     */
    querySubscriptions(query: ServiceHooksInterfaces.SubscriptionsQuery): Promise<ServiceHooksInterfaces.SubscriptionsQuery>;
    /**
     * @param {ServiceHooksInterfaces.Notification} testNotification
     */
    createTestNotification(testNotification: ServiceHooksInterfaces.Notification): Promise<ServiceHooksInterfaces.Notification>;
}
