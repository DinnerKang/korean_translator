import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import CoreInterfaces = require("./interfaces/CoreInterfaces");
import OperationsInterfaces = require("./interfaces/common/OperationsInterfaces");
import VSSInterfaces = require("./interfaces/common/VSSInterfaces");
export interface ICoreApi extends basem.ClientApiBase {
    createConnectedService(connectedServiceCreationData: CoreInterfaces.WebApiConnectedServiceDetails, projectId: string): Promise<CoreInterfaces.WebApiConnectedService>;
    getConnectedServiceDetails(projectId: string, name: string): Promise<CoreInterfaces.WebApiConnectedServiceDetails>;
    getConnectedServices(projectId: string, kind?: CoreInterfaces.ConnectedServiceKind): Promise<CoreInterfaces.WebApiConnectedService[]>;
    createIdentityMru(mruData: CoreInterfaces.IdentityData, mruName: string): Promise<void>;
    deleteIdentityMru(mruData: CoreInterfaces.IdentityData, mruName: string): Promise<void>;
    getIdentityMru(mruName: string): Promise<VSSInterfaces.IdentityRef[]>;
    updateIdentityMru(mruData: CoreInterfaces.IdentityData, mruName: string): Promise<void>;
    getTeamMembers(projectId: string, teamId: string, top?: number, skip?: number): Promise<VSSInterfaces.IdentityRef[]>;
    getProcessById(processId: string): Promise<CoreInterfaces.Process>;
    getProcesses(): Promise<CoreInterfaces.Process[]>;
    getProjectCollection(collectionId: string): Promise<CoreInterfaces.TeamProjectCollection>;
    getProjectCollections(top?: number, skip?: number): Promise<CoreInterfaces.TeamProjectCollectionReference[]>;
    getProjectHistory(minRevision?: number): Promise<CoreInterfaces.TeamProjectReference[]>;
    getProject(projectId: string, includeCapabilities?: boolean, includeHistory?: boolean): Promise<CoreInterfaces.TeamProject>;
    getProjects(stateFilter?: any, top?: number, skip?: number): Promise<CoreInterfaces.TeamProjectReference[]>;
    queueCreateProject(projectToCreate: CoreInterfaces.TeamProject): Promise<OperationsInterfaces.OperationReference>;
    queueDeleteProject(projectId: string): Promise<OperationsInterfaces.OperationReference>;
    updateProject(projectUpdate: CoreInterfaces.TeamProject, projectId: string): Promise<OperationsInterfaces.OperationReference>;
    createOrUpdateProxy(proxy: CoreInterfaces.Proxy): Promise<CoreInterfaces.Proxy>;
    deleteProxy(proxyUrl: string, site?: string): Promise<void>;
    getProxies(proxyUrl?: string): Promise<CoreInterfaces.Proxy[]>;
    createTeam(team: CoreInterfaces.WebApiTeam, projectId: string): Promise<CoreInterfaces.WebApiTeam>;
    deleteTeam(projectId: string, teamId: string): Promise<void>;
    getTeam(projectId: string, teamId: string): Promise<CoreInterfaces.WebApiTeam>;
    getTeams(projectId: string, top?: number, skip?: number): Promise<CoreInterfaces.WebApiTeam[]>;
    updateTeam(teamData: CoreInterfaces.WebApiTeam, projectId: string, teamId: string): Promise<CoreInterfaces.WebApiTeam>;
}
export declare class CoreApi extends basem.ClientApiBase implements ICoreApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * @param {CoreInterfaces.WebApiConnectedServiceDetails} connectedServiceCreationData
    * @param {string} projectId
    */
    createConnectedService(connectedServiceCreationData: CoreInterfaces.WebApiConnectedServiceDetails, projectId: string): Promise<CoreInterfaces.WebApiConnectedService>;
    /**
    * @param {string} projectId
    * @param {string} name
    */
    getConnectedServiceDetails(projectId: string, name: string): Promise<CoreInterfaces.WebApiConnectedServiceDetails>;
    /**
    * @param {string} projectId
    * @param {CoreInterfaces.ConnectedServiceKind} kind
    */
    getConnectedServices(projectId: string, kind?: CoreInterfaces.ConnectedServiceKind): Promise<CoreInterfaces.WebApiConnectedService[]>;
    /**
    * @param {CoreInterfaces.IdentityData} mruData
    * @param {string} mruName
    */
    createIdentityMru(mruData: CoreInterfaces.IdentityData, mruName: string): Promise<void>;
    /**
    * @param {CoreInterfaces.IdentityData} mruData
    * @param {string} mruName
    */
    deleteIdentityMru(mruData: CoreInterfaces.IdentityData, mruName: string): Promise<void>;
    /**
    * @param {string} mruName
    */
    getIdentityMru(mruName: string): Promise<VSSInterfaces.IdentityRef[]>;
    /**
    * @param {CoreInterfaces.IdentityData} mruData
    * @param {string} mruName
    */
    updateIdentityMru(mruData: CoreInterfaces.IdentityData, mruName: string): Promise<void>;
    /**
    * @param {string} projectId
    * @param {string} teamId
    * @param {number} top
    * @param {number} skip
    */
    getTeamMembers(projectId: string, teamId: string, top?: number, skip?: number): Promise<VSSInterfaces.IdentityRef[]>;
    /**
    * Retrieve process by id
    *
    * @param {string} processId
    */
    getProcessById(processId: string): Promise<CoreInterfaces.Process>;
    /**
    */
    getProcesses(): Promise<CoreInterfaces.Process[]>;
    /**
    * Get project collection with the specified id or name.
    *
    * @param {string} collectionId
    */
    getProjectCollection(collectionId: string): Promise<CoreInterfaces.TeamProjectCollection>;
    /**
    * Get project collection references for this application.
    *
    * @param {number} top
    * @param {number} skip
    */
    getProjectCollections(top?: number, skip?: number): Promise<CoreInterfaces.TeamProjectCollectionReference[]>;
    /**
    * @param {number} minRevision
    */
    getProjectHistory(minRevision?: number): Promise<CoreInterfaces.TeamProjectReference[]>;
    /**
    * Get project with the specified id or name, optionally including capabilities.
    *
    * @param {string} projectId
    * @param {boolean} includeCapabilities - Include capabilities (such as source control) in the team project result (default: false).
    * @param {boolean} includeHistory - Search within renamed projects (that had such name in the past).
    */
    getProject(projectId: string, includeCapabilities?: boolean, includeHistory?: boolean): Promise<CoreInterfaces.TeamProject>;
    /**
    * Get project references with the specified state
    *
    * @param {any} stateFilter - Filter on team projects in a specific team project state (default: WellFormed).
    * @param {number} top
    * @param {number} skip
    */
    getProjects(stateFilter?: any, top?: number, skip?: number): Promise<CoreInterfaces.TeamProjectReference[]>;
    /**
    * Queue a project creation.
    *
    * @param {CoreInterfaces.TeamProject} projectToCreate - The project to create.
    */
    queueCreateProject(projectToCreate: CoreInterfaces.TeamProject): Promise<OperationsInterfaces.OperationReference>;
    /**
    * Queue a project deletion.
    *
    * @param {string} projectId - The project id of the project to delete.
    */
    queueDeleteProject(projectId: string): Promise<OperationsInterfaces.OperationReference>;
    /**
    * Update an existing project's name, abbreviation, or description.
    *
    * @param {CoreInterfaces.TeamProject} projectUpdate - The updates for the project.
    * @param {string} projectId - The project id of the project to update.
    */
    updateProject(projectUpdate: CoreInterfaces.TeamProject, projectId: string): Promise<OperationsInterfaces.OperationReference>;
    /**
    * @param {CoreInterfaces.Proxy} proxy
    */
    createOrUpdateProxy(proxy: CoreInterfaces.Proxy): Promise<CoreInterfaces.Proxy>;
    /**
    * @param {string} proxyUrl
    * @param {string} site
    */
    deleteProxy(proxyUrl: string, site?: string): Promise<void>;
    /**
    * @param {string} proxyUrl
    */
    getProxies(proxyUrl?: string): Promise<CoreInterfaces.Proxy[]>;
    /**
    * Creates a team
    *
    * @param {CoreInterfaces.WebApiTeam} team - The team data used to create the team.
    * @param {string} projectId - The name or id (GUID) of the team project in which to create the team.
    */
    createTeam(team: CoreInterfaces.WebApiTeam, projectId: string): Promise<CoreInterfaces.WebApiTeam>;
    /**
    * Deletes a team
    *
    * @param {string} projectId - The name or id (GUID) of the team project containing the team to delete.
    * @param {string} teamId - The name of id of the team to delete.
    */
    deleteTeam(projectId: string, teamId: string): Promise<void>;
    /**
    * Gets a team
    *
    * @param {string} projectId
    * @param {string} teamId
    */
    getTeam(projectId: string, teamId: string): Promise<CoreInterfaces.WebApiTeam>;
    /**
    * @param {string} projectId
    * @param {number} top
    * @param {number} skip
    */
    getTeams(projectId: string, top?: number, skip?: number): Promise<CoreInterfaces.WebApiTeam[]>;
    /**
    * Updates a team's name and/or description
    *
    * @param {CoreInterfaces.WebApiTeam} teamData
    * @param {string} projectId - The name or id (GUID) of the team project containing the team to update.
    * @param {string} teamId - The name of id of the team to update.
    */
    updateTeam(teamData: CoreInterfaces.WebApiTeam, projectId: string, teamId: string): Promise<CoreInterfaces.WebApiTeam>;
}
