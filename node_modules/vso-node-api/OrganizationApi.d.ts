import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import OrganizationInterfaces = require("./interfaces/OrganizationInterfaces");
import VSSInterfaces = require("./interfaces/common/VSSInterfaces");
export interface IOrganizationApi extends basem.ClientApiBase {
    updateCollectionProperties(customHeaders: any, collectionId: string, patchDocument: VSSInterfaces.JsonPatchDocument): Promise<boolean>;
    createCollection(resource: OrganizationInterfaces.Collection): Promise<OrganizationInterfaces.Collection>;
    deleteCollection(collectionId: string): Promise<boolean>;
    getCollection(collectionId: string, propertyNames?: string[]): Promise<OrganizationInterfaces.Collection>;
    getCollections(): Promise<OrganizationInterfaces.Collection[]>;
    restoreCollection(collectionId: string, collectionName: string): Promise<boolean>;
    updateCollection(customHeaders: any, patchDocument: VSSInterfaces.JsonPatchDocument, collectionId: string): Promise<OrganizationInterfaces.Collection>;
    exportOrganizationMigrationBlob(organizationId: string): Promise<OrganizationInterfaces.OrganizationMigrationBlob>;
    importOrganizationMigrationBlob(migrationBlob: OrganizationInterfaces.OrganizationMigrationBlob): Promise<void>;
    updateOrganizationProperties(customHeaders: any, organizationId: string, patchDocument: VSSInterfaces.JsonPatchDocument): Promise<boolean>;
    createOrganization(resource: OrganizationInterfaces.Organization): Promise<OrganizationInterfaces.Organization>;
    getOrganization(organizationId: string, propertyNames?: string[]): Promise<OrganizationInterfaces.Organization>;
    getOrganizations(searchKind: OrganizationInterfaces.OrganizationSearchKind, searchValue: string, isActivated?: boolean): Promise<OrganizationInterfaces.Organization[]>;
    updateOrganization(customHeaders: any, patchDocument: VSSInterfaces.JsonPatchDocument, organizationId: string): Promise<OrganizationInterfaces.Organization>;
    getRegions(): Promise<OrganizationInterfaces.Region[]>;
}
export declare class OrganizationApi extends basem.ClientApiBase implements IOrganizationApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * @param {string} collectionId
    * @param {VSSInterfaces.JsonPatchDocument} patchDocument
    */
    updateCollectionProperties(customHeaders: any, collectionId: string, patchDocument: VSSInterfaces.JsonPatchDocument): Promise<boolean>;
    /**
    * @param {OrganizationInterfaces.Collection} resource
    */
    createCollection(resource: OrganizationInterfaces.Collection): Promise<OrganizationInterfaces.Collection>;
    /**
    * @param {string} collectionId
    */
    deleteCollection(collectionId: string): Promise<boolean>;
    /**
    * @param {string} collectionId
    * @param {string[]} propertyNames
    */
    getCollection(collectionId: string, propertyNames?: string[]): Promise<OrganizationInterfaces.Collection>;
    /**
    */
    getCollections(): Promise<OrganizationInterfaces.Collection[]>;
    /**
    * @param {string} collectionId
    * @param {string} collectionName
    */
    restoreCollection(collectionId: string, collectionName: string): Promise<boolean>;
    /**
    * @param {VSSInterfaces.JsonPatchDocument} patchDocument
    * @param {string} collectionId
    */
    updateCollection(customHeaders: any, patchDocument: VSSInterfaces.JsonPatchDocument, collectionId: string): Promise<OrganizationInterfaces.Collection>;
    /**
    * @param {string} organizationId
    */
    exportOrganizationMigrationBlob(organizationId: string): Promise<OrganizationInterfaces.OrganizationMigrationBlob>;
    /**
    * @param {OrganizationInterfaces.OrganizationMigrationBlob} migrationBlob
    */
    importOrganizationMigrationBlob(migrationBlob: OrganizationInterfaces.OrganizationMigrationBlob): Promise<void>;
    /**
    * @param {string} organizationId
    * @param {VSSInterfaces.JsonPatchDocument} patchDocument
    */
    updateOrganizationProperties(customHeaders: any, organizationId: string, patchDocument: VSSInterfaces.JsonPatchDocument): Promise<boolean>;
    /**
    * @param {OrganizationInterfaces.Organization} resource
    */
    createOrganization(resource: OrganizationInterfaces.Organization): Promise<OrganizationInterfaces.Organization>;
    /**
    * @param {string} organizationId
    * @param {string[]} propertyNames
    */
    getOrganization(organizationId: string, propertyNames?: string[]): Promise<OrganizationInterfaces.Organization>;
    /**
    * @param {OrganizationInterfaces.OrganizationSearchKind} searchKind
    * @param {string} searchValue
    * @param {boolean} isActivated
    */
    getOrganizations(searchKind: OrganizationInterfaces.OrganizationSearchKind, searchValue: string, isActivated?: boolean): Promise<OrganizationInterfaces.Organization[]>;
    /**
    * @param {VSSInterfaces.JsonPatchDocument} patchDocument
    * @param {string} organizationId
    */
    updateOrganization(customHeaders: any, patchDocument: VSSInterfaces.JsonPatchDocument, organizationId: string): Promise<OrganizationInterfaces.Organization>;
    /**
    */
    getRegions(): Promise<OrganizationInterfaces.Region[]>;
}
