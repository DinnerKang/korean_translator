import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import DelegatedAuthorizationInterfaces = require("./interfaces/DelegatedAuthorizationInterfaces");
import VSSInterfaces = require("./interfaces/common/VSSInterfaces");
export interface IDelegatedAuthorizationApi extends basem.ClientApiBase {
    authorize(redirectUri: string, responseType: DelegatedAuthorizationInterfaces.ResponseType, clientId: string, scopes: string, userId?: string): Promise<DelegatedAuthorizationInterfaces.AuthorizationDecision>;
    getAuthorizations(userId?: string): Promise<DelegatedAuthorizationInterfaces.AuthorizationDetails[]>;
    initiateAuthorization(redirectUri: string, responseType: DelegatedAuthorizationInterfaces.ResponseType, clientId: string, scopes: string, userId?: string): Promise<DelegatedAuthorizationInterfaces.AuthorizationDescription>;
    revokeAuthorization(authorizationId: string, userId?: string): Promise<void>;
    host(clientId: string): Promise<void>;
    revoke(clientId: string, hostId?: string): Promise<void>;
    create(registration: DelegatedAuthorizationInterfaces.Registration, includeSecret?: boolean): Promise<DelegatedAuthorizationInterfaces.Registration>;
    delete(registrationId: string): Promise<void>;
    get(registrationId: string, includeSecret: boolean): Promise<DelegatedAuthorizationInterfaces.Registration>;
    list(): Promise<DelegatedAuthorizationInterfaces.Registration[]>;
    update(registration: DelegatedAuthorizationInterfaces.Registration, includeSecret?: boolean): Promise<DelegatedAuthorizationInterfaces.Registration>;
    getSecret(registrationId: string): Promise<VSSInterfaces.JsonWebToken>;
}
export declare class DelegatedAuthorizationApi extends basem.ClientApiBase implements IDelegatedAuthorizationApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * @param {string} redirectUri
    * @param {DelegatedAuthorizationInterfaces.ResponseType} responseType
    * @param {string} clientId
    * @param {string} scopes
    * @param {string} userId
    */
    authorize(redirectUri: string, responseType: DelegatedAuthorizationInterfaces.ResponseType, clientId: string, scopes: string, userId?: string): Promise<DelegatedAuthorizationInterfaces.AuthorizationDecision>;
    /**
    * @param {string} userId
    */
    getAuthorizations(userId?: string): Promise<DelegatedAuthorizationInterfaces.AuthorizationDetails[]>;
    /**
    * @param {string} redirectUri
    * @param {DelegatedAuthorizationInterfaces.ResponseType} responseType
    * @param {string} clientId
    * @param {string} scopes
    * @param {string} userId
    */
    initiateAuthorization(redirectUri: string, responseType: DelegatedAuthorizationInterfaces.ResponseType, clientId: string, scopes: string, userId?: string): Promise<DelegatedAuthorizationInterfaces.AuthorizationDescription>;
    /**
    * @param {string} authorizationId
    * @param {string} userId
    */
    revokeAuthorization(authorizationId: string, userId?: string): Promise<void>;
    /**
    * @param {string} clientId
    */
    host(clientId: string): Promise<void>;
    /**
    * @param {string} clientId
    * @param {string} hostId
    */
    revoke(clientId: string, hostId?: string): Promise<void>;
    /**
    * @param {DelegatedAuthorizationInterfaces.Registration} registration
    * @param {boolean} includeSecret
    */
    create(registration: DelegatedAuthorizationInterfaces.Registration, includeSecret?: boolean): Promise<DelegatedAuthorizationInterfaces.Registration>;
    /**
    * @param {string} registrationId
    */
    delete(registrationId: string): Promise<void>;
    /**
    * @param {string} registrationId
    * @param {boolean} includeSecret
    */
    get(registrationId: string, includeSecret: boolean): Promise<DelegatedAuthorizationInterfaces.Registration>;
    /**
    */
    list(): Promise<DelegatedAuthorizationInterfaces.Registration[]>;
    /**
    * @param {DelegatedAuthorizationInterfaces.Registration} registration
    * @param {boolean} includeSecret
    */
    update(registration: DelegatedAuthorizationInterfaces.Registration, includeSecret?: boolean): Promise<DelegatedAuthorizationInterfaces.Registration>;
    /**
    * @param {string} registrationId
    */
    getSecret(registrationId: string): Promise<VSSInterfaces.JsonWebToken>;
}
