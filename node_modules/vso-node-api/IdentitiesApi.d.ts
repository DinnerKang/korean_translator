import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import DelegatedAuthorizationInterfaces = require("./interfaces/DelegatedAuthorizationInterfaces");
import IdentitiesInterfaces = require("./interfaces/IdentitiesInterfaces");
import VSSInterfaces = require("./interfaces/common/VSSInterfaces");
export interface IIdentitiesApi extends basem.ClientApiBase {
    createOrBindWithClaims(sourceIdentity: IdentitiesInterfaces.Identity): Promise<IdentitiesInterfaces.Identity>;
    createGroups(container: any): Promise<IdentitiesInterfaces.Identity[]>;
    deleteGroup(groupId: string): Promise<void>;
    listGroups(scopeIds?: string, recurse?: boolean, deleted?: boolean, properties?: string): Promise<IdentitiesInterfaces.Identity[]>;
    getIdentityChanges(identitySequenceId: number, groupSequenceId: number, scopeId?: string): Promise<IdentitiesInterfaces.ChangedIdentities>;
    getUserIdentityIdsByDomainId(domainId: string): Promise<string[]>;
    readIdentities(descriptors?: string, identityIds?: string, searchFilter?: string, filterValue?: string, queryMembership?: IdentitiesInterfaces.QueryMembership, properties?: string, includeRestrictedVisibility?: boolean, options?: IdentitiesInterfaces.ReadIdentitiesOptions): Promise<IdentitiesInterfaces.Identity[]>;
    readIdentitiesByScope(scopeId: string, queryMembership?: IdentitiesInterfaces.QueryMembership, properties?: string): Promise<IdentitiesInterfaces.Identity[]>;
    readIdentity(identityId: string, queryMembership?: IdentitiesInterfaces.QueryMembership, properties?: string): Promise<IdentitiesInterfaces.Identity>;
    updateIdentities(identities: VSSInterfaces.VssJsonCollectionWrapperV<IdentitiesInterfaces.Identity[]>): Promise<IdentitiesInterfaces.IdentityUpdateData[]>;
    updateIdentity(identity: IdentitiesInterfaces.Identity, identityId: string): Promise<void>;
    createIdentity(frameworkIdentityInfo: IdentitiesInterfaces.FrameworkIdentityInfo): Promise<IdentitiesInterfaces.Identity>;
    readIdentityBatch(batchInfo: IdentitiesInterfaces.IdentityBatchInfo): Promise<IdentitiesInterfaces.Identity[]>;
    getIdentitySnapshot(scopeId: string): Promise<IdentitiesInterfaces.IdentitySnapshot>;
    getMaxSequenceId(): Promise<number>;
    getSelf(): Promise<IdentitiesInterfaces.IdentitySelf>;
    addMember(containerId: string, memberId: string): Promise<boolean>;
    readMember(containerId: string, memberId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor>;
    readMembers(containerId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor[]>;
    removeMember(containerId: string, memberId: string): Promise<boolean>;
    readMemberOf(memberId: string, containerId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor>;
    readMembersOf(memberId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor[]>;
    createScope(info: IdentitiesInterfaces.CreateScopeInfo, scopeId: string): Promise<IdentitiesInterfaces.IdentityScope>;
    deleteScope(scopeId: string): Promise<void>;
    getScopeById(scopeId: string): Promise<IdentitiesInterfaces.IdentityScope>;
    getScopeByName(scopeName: string): Promise<IdentitiesInterfaces.IdentityScope>;
    renameScope(renameScope: IdentitiesInterfaces.IdentityScope, scopeId: string): Promise<void>;
    getSignoutToken(): Promise<DelegatedAuthorizationInterfaces.AccessTokenResult>;
    getTenant(tenantId: string): Promise<IdentitiesInterfaces.TenantInfo>;
}
export declare class IdentitiesApi extends basem.ClientApiBase implements IIdentitiesApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * @param {IdentitiesInterfaces.Identity} sourceIdentity
    */
    createOrBindWithClaims(sourceIdentity: IdentitiesInterfaces.Identity): Promise<IdentitiesInterfaces.Identity>;
    /**
    * @param {any} container
    */
    createGroups(container: any): Promise<IdentitiesInterfaces.Identity[]>;
    /**
    * @param {string} groupId
    */
    deleteGroup(groupId: string): Promise<void>;
    /**
    * @param {string} scopeIds
    * @param {boolean} recurse
    * @param {boolean} deleted
    * @param {string} properties
    */
    listGroups(scopeIds?: string, recurse?: boolean, deleted?: boolean, properties?: string): Promise<IdentitiesInterfaces.Identity[]>;
    /**
    * @param {number} identitySequenceId
    * @param {number} groupSequenceId
    * @param {string} scopeId
    */
    getIdentityChanges(identitySequenceId: number, groupSequenceId: number, scopeId?: string): Promise<IdentitiesInterfaces.ChangedIdentities>;
    /**
    * @param {string} domainId
    */
    getUserIdentityIdsByDomainId(domainId: string): Promise<string[]>;
    /**
    * @param {string} descriptors
    * @param {string} identityIds
    * @param {string} searchFilter
    * @param {string} filterValue
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    * @param {string} properties
    * @param {boolean} includeRestrictedVisibility
    * @param {IdentitiesInterfaces.ReadIdentitiesOptions} options
    */
    readIdentities(descriptors?: string, identityIds?: string, searchFilter?: string, filterValue?: string, queryMembership?: IdentitiesInterfaces.QueryMembership, properties?: string, includeRestrictedVisibility?: boolean, options?: IdentitiesInterfaces.ReadIdentitiesOptions): Promise<IdentitiesInterfaces.Identity[]>;
    /**
    * @param {string} scopeId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    * @param {string} properties
    */
    readIdentitiesByScope(scopeId: string, queryMembership?: IdentitiesInterfaces.QueryMembership, properties?: string): Promise<IdentitiesInterfaces.Identity[]>;
    /**
    * @param {string} identityId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    * @param {string} properties
    */
    readIdentity(identityId: string, queryMembership?: IdentitiesInterfaces.QueryMembership, properties?: string): Promise<IdentitiesInterfaces.Identity>;
    /**
    * @param {VSSInterfaces.VssJsonCollectionWrapperV<IdentitiesInterfaces.Identity[]>} identities
    */
    updateIdentities(identities: VSSInterfaces.VssJsonCollectionWrapperV<IdentitiesInterfaces.Identity[]>): Promise<IdentitiesInterfaces.IdentityUpdateData[]>;
    /**
    * @param {IdentitiesInterfaces.Identity} identity
    * @param {string} identityId
    */
    updateIdentity(identity: IdentitiesInterfaces.Identity, identityId: string): Promise<void>;
    /**
    * @param {IdentitiesInterfaces.FrameworkIdentityInfo} frameworkIdentityInfo
    */
    createIdentity(frameworkIdentityInfo: IdentitiesInterfaces.FrameworkIdentityInfo): Promise<IdentitiesInterfaces.Identity>;
    /**
    * @param {IdentitiesInterfaces.IdentityBatchInfo} batchInfo
    */
    readIdentityBatch(batchInfo: IdentitiesInterfaces.IdentityBatchInfo): Promise<IdentitiesInterfaces.Identity[]>;
    /**
    * @param {string} scopeId
    */
    getIdentitySnapshot(scopeId: string): Promise<IdentitiesInterfaces.IdentitySnapshot>;
    /**
    */
    getMaxSequenceId(): Promise<number>;
    /**
    */
    getSelf(): Promise<IdentitiesInterfaces.IdentitySelf>;
    /**
    * @param {string} containerId
    * @param {string} memberId
    */
    addMember(containerId: string, memberId: string): Promise<boolean>;
    /**
    * @param {string} containerId
    * @param {string} memberId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMember(containerId: string, memberId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor>;
    /**
    * @param {string} containerId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMembers(containerId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor[]>;
    /**
    * @param {string} containerId
    * @param {string} memberId
    */
    removeMember(containerId: string, memberId: string): Promise<boolean>;
    /**
    * @param {string} memberId
    * @param {string} containerId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMemberOf(memberId: string, containerId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor>;
    /**
    * @param {string} memberId
    * @param {IdentitiesInterfaces.QueryMembership} queryMembership
    */
    readMembersOf(memberId: string, queryMembership?: IdentitiesInterfaces.QueryMembership): Promise<IdentitiesInterfaces.IdentityDescriptor[]>;
    /**
    * @param {IdentitiesInterfaces.CreateScopeInfo} info
    * @param {string} scopeId
    */
    createScope(info: IdentitiesInterfaces.CreateScopeInfo, scopeId: string): Promise<IdentitiesInterfaces.IdentityScope>;
    /**
    * @param {string} scopeId
    */
    deleteScope(scopeId: string): Promise<void>;
    /**
    * @param {string} scopeId
    */
    getScopeById(scopeId: string): Promise<IdentitiesInterfaces.IdentityScope>;
    /**
    * @param {string} scopeName
    */
    getScopeByName(scopeName: string): Promise<IdentitiesInterfaces.IdentityScope>;
    /**
    * @param {IdentitiesInterfaces.IdentityScope} renameScope
    * @param {string} scopeId
    */
    renameScope(renameScope: IdentitiesInterfaces.IdentityScope, scopeId: string): Promise<void>;
    /**
    */
    getSignoutToken(): Promise<DelegatedAuthorizationInterfaces.AccessTokenResult>;
    /**
    * @param {string} tenantId
    */
    getTenant(tenantId: string): Promise<IdentitiesInterfaces.TenantInfo>;
}
