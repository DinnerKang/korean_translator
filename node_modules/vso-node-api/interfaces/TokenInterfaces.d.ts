import VSSInterfaces = require("../interfaces/common/VSSInterfaces");
export interface AccessTokenResult {
    accessToken: VSSInterfaces.JsonWebToken;
    accessTokenError: TokenError;
    authorizationId: string;
    errorDescription: string;
    hasError: boolean;
    refreshToken: RefreshTokenGrant;
    tokenType: string;
    validTo: Date;
}
export interface Authorization {
    accessIssued: Date;
    audience: string;
    authorizationId: string;
    identityId: string;
    isAccessUsed: boolean;
    isValid: boolean;
    redirectUri: string;
    registrationId: string;
    scopes: string;
    source: string;
    validFrom: Date;
    validTo: Date;
}
export interface AuthorizationDecision {
    authorization: Authorization;
    authorizationError: AuthorizationError;
    authorizationGrant: AuthorizationGrant;
    hasError: boolean;
    isAuthorized: boolean;
}
export interface AuthorizationDescription {
    clientRegistration: Registration;
    hasError: boolean;
    initiationError: InitiationError;
    scopeDescriptions: AuthorizationScopeDescription[];
}
export interface AuthorizationDetails {
    authorization: Authorization;
    clientRegistration: Registration;
    scopeDescriptions: AuthorizationScopeDescription[];
}
export declare enum AuthorizationError {
    None = 0,
    ClientIdRequired = 1,
    InvalidClientId = 2,
    ResponseTypeRequired = 3,
    ResponseTypeNotSupported = 4,
    ScopeRequired = 5,
    InvalidScope = 6,
    RedirectUriRequired = 7,
    InsecureRedirectUri = 8,
    InvalidRedirectUri = 9,
    InvalidUserId = 10,
    InvalidUserType = 11,
    AccessDenied = 12,
}
export interface AuthorizationGrant {
    grantType: GrantType;
}
export interface AuthorizationScopeDescription {
    description: string;
    market: string;
    title: string;
}
export declare enum ClientType {
    Confidential = 0,
    Public = 1,
    MediumTrust = 2,
    HighTrust = 3,
    FullTrust = 4,
}
export declare enum GrantType {
    None = 0,
    JwtBearer = 1,
    RefreshToken = 2,
    Implicit = 3,
    ClientCredentials = 4,
}
export interface HostAuthorization {
    hostId: string;
    id: string;
    isValid: boolean;
    registrationId: string;
}
export declare enum InitiationError {
    None = 0,
    ClientIdRequired = 1,
    InvalidClientId = 2,
    ResponseTypeRequired = 3,
    ResponseTypeNotSupported = 4,
    ScopeRequired = 5,
    InvalidScope = 6,
    RedirectUriRequired = 7,
    InsecureRedirectUri = 8,
    InvalidRedirectUri = 9,
}
export interface RefreshTokenGrant extends AuthorizationGrant {
    jwt: VSSInterfaces.JsonWebToken;
}
export interface Registration {
    clientType: ClientType;
    identityId: string;
    isValid: boolean;
    isWellKnown: boolean;
    organizationLocation: string;
    organizationName: string;
    /**
     * Raw cert data string from public key. This will be used for authenticating medium trust clients.
     */
    publicKey: string;
    redirectUris: string[];
    registrationDescription: string;
    registrationId: string;
    registrationLocation: string;
    registrationLogoSecureLocation: string;
    registrationName: string;
    registrationPrivacyStatementLocation: string;
    registrationTermsOfServiceLocation: string;
    responseTypes: string;
    scopes: string;
    secret: string;
    secretVersionId: string;
}
export declare enum ResponseType {
    None = 0,
    Assertion = 1,
    IdToken = 2,
    TenantPicker = 3,
    SignoutToken = 4,
    AppToken = 5,
    Code = 6,
}
export declare enum TokenError {
    None = 0,
    GrantTypeRequired = 1,
    AuthorizationGrantRequired = 2,
    ClientSecretRequired = 3,
    RedirectUriRequired = 4,
    InvalidAuthorizationGrant = 5,
    InvalidAuthorizationScopes = 6,
    InvalidRefreshToken = 7,
    AuthorizationNotFound = 8,
    AuthorizationGrantExpired = 9,
    AccessAlreadyIssued = 10,
    InvalidRedirectUri = 11,
    AccessTokenNotFound = 12,
    InvalidAccessToken = 13,
    AccessTokenAlreadyRefreshed = 14,
    InvalidClientSecret = 15,
    ClientSecretExpired = 16,
    ServerError = 17,
    AccessDenied = 18,
    AccessTokenKeyRequired = 19,
    InvalidAccessTokenKey = 20,
    FailedToGetAccessToken = 21,
    InvalidClientId = 22,
    InvalidClient = 23,
    InvalidValidTo = 24,
    InvalidUserId = 25,
    FailedToIssueAccessToken = 26,
    AuthorizationGrantScopeMissing = 27,
    InvalidPublicAccessTokenKey = 28,
    InvalidPublicAccessToken = 29,
}
export declare var TypeInfo: {
    AccessTokenResult: {
        fields: any;
    };
    Authorization: {
        fields: any;
    };
    AuthorizationDecision: {
        fields: any;
    };
    AuthorizationDescription: {
        fields: any;
    };
    AuthorizationDetails: {
        fields: any;
    };
    AuthorizationError: {
        enumValues: {
            "none": number;
            "clientIdRequired": number;
            "invalidClientId": number;
            "responseTypeRequired": number;
            "responseTypeNotSupported": number;
            "scopeRequired": number;
            "invalidScope": number;
            "redirectUriRequired": number;
            "insecureRedirectUri": number;
            "invalidRedirectUri": number;
            "invalidUserId": number;
            "invalidUserType": number;
            "accessDenied": number;
        };
    };
    AuthorizationGrant: {
        fields: any;
    };
    AuthorizationScopeDescription: {
        fields: any;
    };
    ClientType: {
        enumValues: {
            "confidential": number;
            "public": number;
            "mediumTrust": number;
            "highTrust": number;
            "fullTrust": number;
        };
    };
    GrantType: {
        enumValues: {
            "none": number;
            "jwtBearer": number;
            "refreshToken": number;
            "implicit": number;
            "clientCredentials": number;
        };
    };
    HostAuthorization: {
        fields: any;
    };
    InitiationError: {
        enumValues: {
            "none": number;
            "clientIdRequired": number;
            "invalidClientId": number;
            "responseTypeRequired": number;
            "responseTypeNotSupported": number;
            "scopeRequired": number;
            "invalidScope": number;
            "redirectUriRequired": number;
            "insecureRedirectUri": number;
            "invalidRedirectUri": number;
        };
    };
    RefreshTokenGrant: {
        fields: any;
    };
    Registration: {
        fields: any;
    };
    ResponseType: {
        enumValues: {
            "none": number;
            "assertion": number;
            "idToken": number;
            "tenantPicker": number;
            "signoutToken": number;
            "appToken": number;
            "code": number;
        };
    };
    TokenError: {
        enumValues: {
            "none": number;
            "grantTypeRequired": number;
            "authorizationGrantRequired": number;
            "clientSecretRequired": number;
            "redirectUriRequired": number;
            "invalidAuthorizationGrant": number;
            "invalidAuthorizationScopes": number;
            "invalidRefreshToken": number;
            "authorizationNotFound": number;
            "authorizationGrantExpired": number;
            "accessAlreadyIssued": number;
            "invalidRedirectUri": number;
            "accessTokenNotFound": number;
            "invalidAccessToken": number;
            "accessTokenAlreadyRefreshed": number;
            "invalidClientSecret": number;
            "clientSecretExpired": number;
            "serverError": number;
            "accessDenied": number;
            "accessTokenKeyRequired": number;
            "invalidAccessTokenKey": number;
            "failedToGetAccessToken": number;
            "invalidClientId": number;
            "invalidClient": number;
            "invalidValidTo": number;
            "invalidUserId": number;
            "failedToIssueAccessToken": number;
            "authorizationGrantScopeMissing": number;
            "invalidPublicAccessTokenKey": number;
            "invalidPublicAccessToken": number;
        };
    };
};
