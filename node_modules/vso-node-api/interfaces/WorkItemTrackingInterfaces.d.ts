import VSSInterfaces = require("../interfaces/common/VSSInterfaces");
export interface AccountMyWorkResult {
    /**
     * True, when length of WorkItemDetails is same as the limit
     */
    querySizeLimitExceeded: boolean;
    /**
     * WorkItem Details
     */
    workItemDetails: AccountWorkWorkItemModel[];
}
/**
 * Represents Work Item Recent Activity
 */
export interface AccountRecentActivityWorkItemModel {
    /**
     * Date of the last Activity by the user
     */
    activityDate: Date;
    /**
     * Type of the activity
     */
    activityType: WorkItemRecentActivityType;
    /**
     * Assigned To
     */
    assignedTo: string;
    /**
     * Last changed date of the work item
     */
    changedDate: Date;
    /**
     * Work Item Id
     */
    id: number;
    /**
     * TeamFoundationId of the user this activity belongs to
     */
    identityId: string;
    /**
     * State of the work item
     */
    state: string;
    /**
     * Team project the work item belongs to
     */
    teamProject: string;
    /**
     * Title of the work item
     */
    title: string;
    /**
     * Type of Work Item
     */
    workItemType: string;
}
export interface AccountWorkWorkItemModel {
    assignedTo: string;
    changedDate: Date;
    id: number;
    state: string;
    teamProject: string;
    title: string;
    workItemType: string;
}
export interface AttachmentReference {
    id: string;
    url: string;
}
export declare enum CommentSortOrder {
    Asc = 1,
    Desc = 2,
}
export interface FieldDependentRule extends WorkItemTrackingResource {
    dependentFields: WorkItemFieldReference[];
}
export interface FieldsToEvaluate {
    fields: string[];
    fieldUpdates: {
        [key: string]: any;
    };
    fieldValues: {
        [key: string]: any;
    };
    rulesFrom: string[];
}
export declare enum FieldType {
    String = 0,
    Integer = 1,
    DateTime = 2,
    PlainText = 3,
    Html = 4,
    TreePath = 5,
    History = 6,
    Double = 7,
    Guid = 8,
    Boolean = 9,
    Identity = 10,
    PicklistString = 11,
    PicklistInteger = 12,
    PicklistDouble = 13,
}
export declare enum GetFieldsExpand {
    None = 0,
    ExtensionFields = 1,
}
export interface IdentityReference {
    id: string;
    name: string;
    url: string;
}
export interface Link {
    attributes: {
        [key: string]: any;
    };
    rel: string;
    url: string;
}
export declare enum LinkChangeType {
    Create = 0,
    Remove = 1,
}
export declare enum LinkQueryMode {
    WorkItems = 0,
    LinksOneHopMustContain = 1,
    LinksOneHopMayContain = 2,
    LinksOneHopDoesNotContain = 3,
    LinksRecursiveMustContain = 4,
    LinksRecursiveMayContain = 5,
    LinksRecursiveDoesNotContain = 6,
}
export declare enum LogicalOperation {
    NONE = 0,
    AND = 1,
    OR = 2,
}
/**
 * Project work item type state colors
 */
export interface ProjectWorkItemStateColors {
    /**
     * Project name
     */
    projectName: string;
    /**
     * State colors for all work item type in a project
     */
    workItemTypeStateColors: WorkItemTypeStateColors[];
}
export declare enum ProvisioningActionType {
    Import = 0,
    Validate = 1,
}
export interface ProvisioningResult {
    provisioningImportEvents: string[];
}
export declare enum QueryExpand {
    None = 0,
    Wiql = 1,
    Clauses = 2,
    All = 3,
}
export interface QueryHierarchyItem extends WorkItemTrackingResource {
    children: QueryHierarchyItem[];
    clauses: WorkItemQueryClause;
    columns: WorkItemFieldReference[];
    createdBy: IdentityReference;
    createdDate: Date;
    filterOptions: LinkQueryMode;
    hasChildren: boolean;
    id: string;
    isDeleted: boolean;
    isFolder: boolean;
    isInvalidSyntax: boolean;
    isPublic: boolean;
    lastModifiedBy: IdentityReference;
    lastModifiedDate: Date;
    linkClauses: WorkItemQueryClause;
    name: string;
    path: string;
    queryType: QueryType;
    sortColumns: WorkItemQuerySortColumn[];
    sourceClauses: WorkItemQueryClause;
    targetClauses: WorkItemQueryClause;
    wiql: string;
}
export declare enum QueryOption {
    Doing = 1,
    Done = 2,
    Followed = 3,
}
export declare enum QueryResultType {
    WorkItem = 1,
    WorkItemLink = 2,
}
export declare enum QueryType {
    Flat = 1,
    Tree = 2,
    OneHop = 3,
}
export declare enum ReportingRevisionsExpand {
    None = 0,
    Fields = 1,
}
export interface ReportingWorkItemLink {
    changedBy: VSSInterfaces.IdentityRef;
    changedDate: Date;
    changedOperation: LinkChangeType;
    comment: string;
    isActive: boolean;
    linkType: string;
    rel: string;
    sourceId: number;
    targetId: number;
}
export interface ReportingWorkItemLinksBatch extends StreamedBatch<ReportingWorkItemLink> {
}
export interface ReportingWorkItemRevisionsBatch extends StreamedBatch<WorkItem> {
}
export interface ReportingWorkItemRevisionsFilter {
    /**
     * A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.
     */
    fields: string[];
    /**
     * Include deleted work item in the result.
     */
    includeDeleted: boolean;
    /**
     * Return an identity reference instead of a string value for identity fields.
     */
    includeIdentityRef: boolean;
    /**
     * Include only the latest version of a work item, skipping over all previous revisions of the work item.
     */
    includeLatestOnly: boolean;
    /**
     * Include tag reference instead of string value for System.Tags field
     */
    includeTagRef: boolean;
    /**
     * A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.
     */
    types: string[];
}
export interface StreamedBatch<T> {
    continuationToken: string;
    isLastBatch: boolean;
    nextLink: string;
    values: T[];
}
export declare enum TemplateType {
    WorkItemType = 0,
    GlobalWorkflow = 1,
}
export declare enum TreeNodeStructureType {
    Area = 0,
    Iteration = 1,
}
export declare enum TreeStructureGroup {
    Areas = 0,
    Iterations = 1,
}
export interface Wiql {
    query: string;
}
export interface WorkItem extends WorkItemTrackingResource {
    fields: {
        [key: string]: any;
    };
    id: number;
    relations: WorkItemRelation[];
    rev: number;
}
export interface WorkItemClassificationNode extends WorkItemTrackingResource {
    attributes: {
        [key: string]: any;
    };
    children: WorkItemClassificationNode[];
    id: number;
    identifier: string;
    name: string;
    structureType: TreeNodeStructureType;
}
export interface WorkItemComment extends WorkItemTrackingResource {
    revisedBy: IdentityReference;
    revisedDate: Date;
    revision: number;
    text: string;
}
export interface WorkItemComments {
    comments: WorkItemComment[];
    count: number;
    fromRevisionCount: number;
    totalCount: number;
}
export interface WorkItemDelete extends WorkItemDeleteReference {
    resource: WorkItem;
}
export interface WorkItemDeleteReference {
    code: number;
    deletedBy: string;
    deletedDate: string;
    id: number;
    message: string;
    name: string;
    project: string;
    type: string;
    url: string;
}
export interface WorkItemDeleteShallowReference {
    id: number;
    url: string;
}
export interface WorkItemDeleteUpdate {
    isDeleted: boolean;
}
export declare enum WorkItemErrorPolicy {
    Fail = 1,
    Omit = 2,
}
export declare enum WorkItemExpand {
    None = 0,
    Relations = 1,
    Fields = 2,
    Links = 3,
    All = 4,
}
export interface WorkItemField extends WorkItemTrackingResource {
    description: string;
    name: string;
    readOnly: boolean;
    referenceName: string;
    supportedOperations: WorkItemFieldOperation[];
    type: FieldType;
}
export interface WorkItemFieldOperation {
    name: string;
    referenceName: string;
}
export interface WorkItemFieldReference {
    name: string;
    referenceName: string;
    url: string;
}
export interface WorkItemFieldUpdate {
    newValue: any;
    oldValue: any;
}
export interface WorkItemHistory extends WorkItemTrackingResource {
    rev: number;
    revisedBy: IdentityReference;
    revisedDate: Date;
    value: string;
}
export interface WorkItemLink {
    rel: string;
    source: WorkItemReference;
    target: WorkItemReference;
}
export interface WorkItemQueryClause {
    clauses: WorkItemQueryClause[];
    field: WorkItemFieldReference;
    fieldValue: WorkItemFieldReference;
    isFieldValue: boolean;
    logicalOperator: LogicalOperation;
    operator: WorkItemFieldOperation;
    value: string;
}
export interface WorkItemQueryResult {
    asOf: Date;
    columns: WorkItemFieldReference[];
    queryResultType: QueryResultType;
    queryType: QueryType;
    sortColumns: WorkItemQuerySortColumn[];
    workItemRelations: WorkItemLink[];
    workItems: WorkItemReference[];
}
export interface WorkItemQuerySortColumn {
    descending: boolean;
    field: WorkItemFieldReference;
}
export declare enum WorkItemRecentActivityType {
    Visited = 0,
    Edited = 1,
    Deleted = 2,
    Restored = 3,
}
export interface WorkItemReference {
    id: number;
    url: string;
}
export interface WorkItemRelation extends Link {
}
export interface WorkItemRelationType extends WorkItemTrackingReference {
    attributes: {
        [key: string]: any;
    };
}
export interface WorkItemRelationUpdates {
    added: WorkItemRelation[];
    removed: WorkItemRelation[];
    updated: WorkItemRelation[];
}
/**
 * Work item type state name and color pair
 */
export interface WorkItemStateColor {
    /**
     * Color value
     */
    color: string;
    /**
     * Work item type state name
     */
    name: string;
}
export interface WorkItemStateTransition {
    to: string;
}
export interface WorkItemTemplate extends WorkItemTemplateReference {
    fields: {
        [key: string]: string;
    };
}
export interface WorkItemTemplateReference extends WorkItemTrackingResource {
    description: string;
    id: string;
    name: string;
    workItemTypeName: string;
}
export interface WorkItemTrackingReference extends WorkItemTrackingResource {
    name: string;
    referenceName: string;
}
export interface WorkItemTrackingResource extends WorkItemTrackingResourceReference {
    _links: any;
}
export interface WorkItemTrackingResourceReference {
    url: string;
}
export interface WorkItemType extends WorkItemTrackingResource {
    color: string;
    description: string;
    fieldInstances: WorkItemTypeFieldInstance[];
    fields: WorkItemTypeFieldInstance[];
    name: string;
    transitions: {
        [key: string]: WorkItemStateTransition[];
    };
    xmlForm: string;
}
export interface WorkItemTypeCategory extends WorkItemTrackingResource {
    defaultWorkItemType: WorkItemTypeReference;
    name: string;
    referenceName: string;
    workItemTypes: WorkItemTypeReference[];
}
export interface WorkItemTypeColor {
    primaryColor: string;
    secondaryColor: string;
    workItemTypeName: string;
}
export interface WorkItemTypeFieldInstance extends WorkItemFieldReference {
    alwaysRequired: boolean;
    field: WorkItemFieldReference;
    helpText: string;
}
export interface WorkItemTypeReference extends WorkItemTrackingResourceReference {
    name: string;
}
/**
 * State colors for a work item type
 */
export interface WorkItemTypeStateColors {
    /**
     * Work item type state colors
     */
    stateColors: WorkItemStateColor[];
    /**
     * Work item type name
     */
    workItemTypeName: string;
}
export interface WorkItemTypeTemplate {
    template: string;
}
export interface WorkItemTypeTemplateUpdateModel {
    actionType: ProvisioningActionType;
    methodology: string;
    template: string;
    templateType: TemplateType;
}
export interface WorkItemUpdate extends WorkItemTrackingResourceReference {
    fields: {
        [key: string]: WorkItemFieldUpdate;
    };
    id: number;
    relations: WorkItemRelationUpdates;
    rev: number;
    revisedBy: IdentityReference;
    revisedDate: Date;
    workItemId: number;
}
export declare var TypeInfo: {
    AccountMyWorkResult: any;
    AccountRecentActivityWorkItemModel: any;
    AccountWorkWorkItemModel: any;
    CommentSortOrder: {
        enumValues: {
            "asc": number;
            "desc": number;
        };
    };
    FieldType: {
        enumValues: {
            "string": number;
            "integer": number;
            "dateTime": number;
            "plainText": number;
            "html": number;
            "treePath": number;
            "history": number;
            "double": number;
            "guid": number;
            "boolean": number;
            "identity": number;
            "picklistString": number;
            "picklistInteger": number;
            "picklistDouble": number;
        };
    };
    GetFieldsExpand: {
        enumValues: {
            "none": number;
            "extensionFields": number;
        };
    };
    LinkChangeType: {
        enumValues: {
            "create": number;
            "remove": number;
        };
    };
    LinkQueryMode: {
        enumValues: {
            "workItems": number;
            "linksOneHopMustContain": number;
            "linksOneHopMayContain": number;
            "linksOneHopDoesNotContain": number;
            "linksRecursiveMustContain": number;
            "linksRecursiveMayContain": number;
            "linksRecursiveDoesNotContain": number;
        };
    };
    LogicalOperation: {
        enumValues: {
            "nONE": number;
            "aND": number;
            "oR": number;
        };
    };
    ProvisioningActionType: {
        enumValues: {
            "import": number;
            "validate": number;
        };
    };
    QueryExpand: {
        enumValues: {
            "none": number;
            "wiql": number;
            "clauses": number;
            "all": number;
        };
    };
    QueryHierarchyItem: any;
    QueryOption: {
        enumValues: {
            "doing": number;
            "done": number;
            "followed": number;
        };
    };
    QueryResultType: {
        enumValues: {
            "workItem": number;
            "workItemLink": number;
        };
    };
    QueryType: {
        enumValues: {
            "flat": number;
            "tree": number;
            "oneHop": number;
        };
    };
    ReportingRevisionsExpand: {
        enumValues: {
            "none": number;
            "fields": number;
        };
    };
    ReportingWorkItemLink: any;
    TemplateType: {
        enumValues: {
            "workItemType": number;
            "globalWorkflow": number;
        };
    };
    TreeNodeStructureType: {
        enumValues: {
            "area": number;
            "iteration": number;
        };
    };
    TreeStructureGroup: {
        enumValues: {
            "areas": number;
            "iterations": number;
        };
    };
    WorkItemClassificationNode: any;
    WorkItemComment: any;
    WorkItemComments: any;
    WorkItemErrorPolicy: {
        enumValues: {
            "fail": number;
            "omit": number;
        };
    };
    WorkItemExpand: {
        enumValues: {
            "none": number;
            "relations": number;
            "fields": number;
            "links": number;
            "all": number;
        };
    };
    WorkItemField: any;
    WorkItemHistory: any;
    WorkItemQueryClause: any;
    WorkItemQueryResult: any;
    WorkItemRecentActivityType: {
        enumValues: {
            "visited": number;
            "edited": number;
            "deleted": number;
            "restored": number;
        };
    };
    WorkItemTypeTemplateUpdateModel: any;
    WorkItemUpdate: any;
};
