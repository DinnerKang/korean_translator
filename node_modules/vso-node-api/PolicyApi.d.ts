import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import PolicyInterfaces = require("./interfaces/PolicyInterfaces");
export interface IPolicyApi extends basem.ClientApiBase {
    createPolicyConfiguration(configuration: PolicyInterfaces.PolicyConfiguration, project: string, configurationId?: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    deletePolicyConfiguration(project: string, configurationId: number): Promise<void>;
    getPolicyConfiguration(project: string, configurationId: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    getPolicyConfigurations(project: string): Promise<PolicyInterfaces.PolicyConfiguration[]>;
    updatePolicyConfiguration(configuration: PolicyInterfaces.PolicyConfiguration, project: string, configurationId: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    getPolicyEvaluation(project: string, evaluationId: string): Promise<PolicyInterfaces.PolicyEvaluationRecord>;
    requeuePolicyEvaluation(project: string, evaluationId: string): Promise<PolicyInterfaces.PolicyEvaluationRecord>;
    getPolicyEvaluations(project: string, artifactId: string, includeNotApplicable?: boolean, top?: number, skip?: number): Promise<PolicyInterfaces.PolicyEvaluationRecord[]>;
    getPolicyConfigurationRevision(project: string, configurationId: number, revisionId: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    getPolicyConfigurationRevisions(project: string, configurationId: number, top?: number, skip?: number): Promise<PolicyInterfaces.PolicyConfiguration[]>;
    getPolicyType(project: string, typeId: string): Promise<PolicyInterfaces.PolicyType>;
    getPolicyTypes(project: string): Promise<PolicyInterfaces.PolicyType[]>;
}
export declare class PolicyApi extends basem.ClientApiBase implements IPolicyApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
     * @param {PolicyInterfaces.PolicyConfiguration} configuration
     * @param {string} project - Project ID or project name
     * @param {number} configurationId
     */
    createPolicyConfiguration(configuration: PolicyInterfaces.PolicyConfiguration, project: string, configurationId?: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    /**
     * @param {string} project - Project ID or project name
     * @param {number} configurationId
     */
    deletePolicyConfiguration(project: string, configurationId: number): Promise<void>;
    /**
     * @param {string} project - Project ID or project name
     * @param {number} configurationId
     */
    getPolicyConfiguration(project: string, configurationId: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    /**
     * @param {string} project - Project ID or project name
     */
    getPolicyConfigurations(project: string): Promise<PolicyInterfaces.PolicyConfiguration[]>;
    /**
     * @param {PolicyInterfaces.PolicyConfiguration} configuration
     * @param {string} project - Project ID or project name
     * @param {number} configurationId
     */
    updatePolicyConfiguration(configuration: PolicyInterfaces.PolicyConfiguration, project: string, configurationId: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    /**
     * @param {string} project - Project ID or project name
     * @param {string} evaluationId
     */
    getPolicyEvaluation(project: string, evaluationId: string): Promise<PolicyInterfaces.PolicyEvaluationRecord>;
    /**
     * @param {string} project - Project ID or project name
     * @param {string} evaluationId
     */
    requeuePolicyEvaluation(project: string, evaluationId: string): Promise<PolicyInterfaces.PolicyEvaluationRecord>;
    /**
     * @param {string} project - Project ID or project name
     * @param {string} artifactId
     * @param {boolean} includeNotApplicable
     * @param {number} top
     * @param {number} skip
     */
    getPolicyEvaluations(project: string, artifactId: string, includeNotApplicable?: boolean, top?: number, skip?: number): Promise<PolicyInterfaces.PolicyEvaluationRecord[]>;
    /**
     * @param {string} project - Project ID or project name
     * @param {number} configurationId
     * @param {number} revisionId
     */
    getPolicyConfigurationRevision(project: string, configurationId: number, revisionId: number): Promise<PolicyInterfaces.PolicyConfiguration>;
    /**
     * @param {string} project - Project ID or project name
     * @param {number} configurationId
     * @param {number} top
     * @param {number} skip
     */
    getPolicyConfigurationRevisions(project: string, configurationId: number, top?: number, skip?: number): Promise<PolicyInterfaces.PolicyConfiguration[]>;
    /**
     * @param {string} project - Project ID or project name
     * @param {string} typeId
     */
    getPolicyType(project: string, typeId: string): Promise<PolicyInterfaces.PolicyType>;
    /**
     * @param {string} project - Project ID or project name
     */
    getPolicyTypes(project: string): Promise<PolicyInterfaces.PolicyType[]>;
}
